COMPOSITE PATTERN:

Goal:
To compose nested structures of objects.
and to deal with the classes for these objects uniformly.

enforcing Polymorphism.
Abstract superclass can also be used in place of a Interface.

Leaf and Composite class are unified using a single Type(interface)

Recursive Composition.

We can add Composite only to a Composite object, and not a leaf Object.

This is used to address two issues:
- how do we use individual types of objects to build a tree-like structure.
- How can we treat the individual types of objects uniformly without checking their types.

Component Interface: 

An example of building.

IStructure : Interface.
Housing Class : Composite Class. 
A Housing object can contain other housing objects.
Room: Leaf class. 
A Room cannot contain another room.


Step 1: Design the interface that defines the oberall type:
public interface IStructure {
    public void enter();
    public void exit();
    public void location();
    public String getName();
}


Step 2: Implement the Composite Class:
public class Housing implements IStructure {
    private ArrayList<IStructure> structures;
    private String address;

    public Housing (String address) {
        this.structures = new ArrayList<IStructure>();
        this.address = address;
    }

    public String getName(){
        return this.address;
    }

    public int addStructure(IStructure component) {
        this.structures.add(component);
        return this.structures.size() - 1;
    }

    public IStructure getStructure(int componentNumber) {
        return this.structures.get(componentNumber);
    }

    public void location() {
        System.out.println("You are currently in " + this.getName() + ". It has ");
        for(IStructure struct: this.structures){
            System.out.println(struct.getName());
        }
    }
    /*Print out when we enter and exit the building*/
    public void enter() {...}
    public void exit() {...}
}



Step 3: Implement the leaf class:
public abstract class Room implements IStructure {
    public String name;

    public void enter() {
        System.out.println("You have entered the " + this.name);
    }

    public void exit() {
        System.out.println("You have left the " + this.name);
    }

    public void location() {
        System.out.println("You are currently in the " + this.name);
    }

    public String getName() {
        return this.name;
    }
}



Main Class:
public class Program {
    public static void main(String args[]) {
        Housing building = new Housing("123 Street");
        Housing floor1 = new Housing("123 Street - First Floor");
        int firstFloor = building.addStructure(floor1);

        Room washroom1m = new Room("1F Men's Washroom");
        Room washroom1w = new Room("1F Women's Washroom");
        Room common1 = new Room("1F Common Area");

        int firstMens = floor1.addStructure(washroom1m);
        int firstWomans = floor1.addStructure(washroom1w);
        int firstCommon = floor1.addStructure(common1);

        building.enter(); // Enter building 
        Housing currentfloor = building.getStructure(firstfloor);
        currentFloor.enter(); // Walk into the first floor 
        Room currentRoom = currentFloor.getStructure(firstMens);
        currentRoom.enter(); // Walks into the men's room 
        currentRoom = currentFloor.getStructure(firstCommon);
        currentRoom.enter(); // Walks into the common area.
    }
}


The Composite design pattern is used to solve the issues of how to build a tree like 
structure of objects, and how to treat the individual types of those object uniformly.

this is achieved by Enforcing polymorphism across each class through implementing an interface 
(or inheriting from a superclass).

Using a technique called Recursive composition which allows objects to be composed of other objects
that are of a common type.

