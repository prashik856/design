FACADE PATTERN 

Client classes require a simplified interaction.

Facade? : 
Provides a single simplified interface for client classes.

What is facade?
A facade simple acts as a point of entry into your subsystem.
What a waiter or a salesperson would do in real life.

A facade is a Wrapper class that encapsulates a subsystem in order to hide the subsystem's 
complexity.


An example of banking, without facade, the customer is responsible of having in check 
it's checquing, Saving and Investment.

With facade, we introduce the Banking service which takes care of these things for us.
Now, customer will only need to interact with the Bank Service class, all other accounts
will be handled by the Bank Service.
BankService class is thus Wrapping the other classes for customer class to use.


Step 1:
Design the interface:
public interface IAccount {
    public void deposit(BigDecimal amount);
    public void withdraw(BigDecimal amount);
    public void transfer(BigDecimal amount);
    public int getAccountNumber();
}
This interface will not be known to the customer class.

Step 2:
Implement the interface with one or more classes.

public class Chequing implements IAccount{...}
public class Saving implements IAccount{...}
public class Investment implements IAccount{...}

Interface help us create subtypes. Thus, Chequing, Saving and Investments are subtypes of IAccount.

A facade class can be used to wrap all the interfaces and classes for a subsystem.


Step 3: 
Create the facade class and wrap the classes that implement the interface.

Example:
public class BankService{
    private Hashtable<int, IAccount> bankAccounts;
    public BankService(){
        this.bankAccounts= new Hashtable<int, IAccount>;
    }
    public int createNewAccount(String type, BigDecimal initAmount) {
        IAccount newAccount = null;
        switch(type) {
            case "chequing":
                newAccount = new Chequing(initAmount);
                break;
            case "saving":
                newAccount = new Saving(initAmount);
                break;
            case "investment":
                newAcount = new Investment(initAmount);
                break;
            default:
                System.out.println("Invalid account type");
                break;
        }
        if(newAccount != null) {
            this.bankAccounts.put(newAccount.getAccountNumber, newAccount);
            return newAccount.getAccountNumber();
        }
        return -1;
    }
    public void transferMoney(int to, int from, BigDecimal amount) {
        IAccount toAccount = this.bankAccounts.get(to);
        IAccount fromAccount = this.bankAccounts.get(from);
        fromAcount.transfer(toAccount, amount);
    }
}

We are making use of Information Hiding here.


Step 4:
use the facade class to access the subsystem.
public class Customer {
    public static void main(String args[]) {
        BankService myBankService = new BankService();

        int mySavings = myBankService.createNewAccount("saving", new BigDecimal(500.00));
        int myInvestment = myBankService.createNewAccount("investment", new BigDecimal(1000.00));
        myBankService.transferMoney(mySavings, myInvestment, new BigDecimal(300.00));
    }
}


The facade Design Pattern:
-> Is a means to hide the complexity of a subsystem by encapsulating it behind a unifying 
wrapper called a facade class.
- Removes the need for client to manage a subsystem on their own, resulting in less coupling between
the subsystem and the client class.
- Handles instantiation and redirection of tasks to the appropriate class within the subsystem.
- provides client classes with a simplified interface for the subsystem.
- Acts simply as a point of entry to a subsystem and does not add more functionality to the subsystem.

