PROXY PATTERN:

Object being represented by a proxy object.
Proxy acts as a simplified or a light weight version of the original object. 

Proxy Design Pattern:
Why do we want to use the Proxy class?
the three most common scenarios are:
1. To act as a virtual proxy 
2. To act as a protection proxy 
3. To act as a remote proxy 


Proxy class will act as a stand in for the Real Subject Class. 

Suppose online Retail Store?


Step 1: Design the subject Interface:
public interface IOrder {
    public void fulfillOrder(Order);
}


Step 2: Implement the real subject class:
public class Warehouse implements IOrder {
    private Hashtable<String, Integer> stock;
    private String address;
    /*Constructors and other attributes would go here*/
    ...
    public void fulfillOrder(Order order) {
        for (Item item: order.itemList){
            this.stock.replace(item.sku, stock.get(item) - 1);
        }

        /* Process the order for shipment and delivery */
        ...
    }

    public int currentInventory(Item item) {
        if (stock.containsKey(item.sku)) {
            return stock.get(item.sku).intValue();
        }
        return 0;
    }
}


Step 3: Implement the proxy class 
public class OrderFulfillment implements IOrder {
    private List<Warehouse> warehouses;
    /* constructors and other attributes would go here */
    public void fulfillOrder(Order order) {
        /* For each item in a customer order, check each warehouse to see if 
        it is in stock.

        If it is then create a new Order for that warehouse. Else check the next 
        warehouse. 
        Send the all the orders to the wareshouse(s) after you finish iterating over 
        all the items in the original order. */
        for(Item item: order.itemList) {
            for(Warehouse warehouse: warehouses) {
                ...
            }
        }
        return ;
    }
}




Summary: 
- To use the proxy class to wrap the real subject class.
- To have a polymorphic design so that the client class can expect the 
same interface for the proxy and real subject class 
- To use a lightweight proxy in place of a resouce intensive object until 
it is actually needed. 
- To implement some form of intelligent verification of requests from the client code 
in order to determine if, how, and to whom the requests should be forwarded to.
- To present a local representation of a system that is not in the same physical 
or virtual space.

